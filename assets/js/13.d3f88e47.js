(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{388:function(t,e,a){t.exports=a.p+"assets/img/vue-lifecycle-v3.b1ccfc95.svg"},421:function(t,e,a){"use strict";a.r(e);var v=a(28),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"vue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),v("p",[v("strong",[t._v("目录")])]),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#生命周期"}},[t._v("生命周期")]),v("ul",[v("li",[v("a",{attrs:{href:"#列举-vue-的生命周期以及它们的应用场景"}},[t._v("列举 Vue 的生命周期以及它们的应用场景")])]),v("li",[v("a",{attrs:{href:"#父组件和子组件生命周期钩子执行顺序是什么"}},[t._v("父组件和子组件生命周期钩子执行顺序是什么？")])]),v("li",[v("a",{attrs:{href:"#dom-渲染在-vue-的哪个生命周期就已经完成"}},[t._v("DOM 渲染在 Vue 的哪个生命周期就已经完成")])]),v("li",[v("a",{attrs:{href:"#应该在哪个生命周期中请求数据"}},[t._v("应该在哪个生命周期中请求数据？")])]),v("li",[v("a",{attrs:{href:"#beforeunmount-一般的用途"}},[t._v("beforeUnmount 一般的用途")])])])]),v("li",[v("a",{attrs:{href:"#vue-使用"}},[t._v("vue 使用")]),v("ul",[v("li",[v("a",{attrs:{href:"#vue-组件通信"}},[t._v("vue 组件通信")])]),v("li",[v("a",{attrs:{href:"#computed-的特点是什么"}},[t._v("computed 的特点是什么？")])]),v("li",[v("a",{attrs:{href:"#computed-和-watch-的区别和运用的场景"}},[t._v("computed 和 watch 的区别和运用的场景？")])]),v("li",[v("a",{attrs:{href:"#组件的-data-为什么要是一个函数"}},[t._v("组件的 data 为什么要是一个函数")])]),v("li",[v("a",{attrs:{href:"#vue-是单向数据流吗-怎样理解-vue-的单向数据流"}},[t._v("Vue 是单向数据流吗？怎样理解 Vue 的单向数据流？")])]),v("li",[v("a",{attrs:{href:"#v-if-与-v-show-有什么区别-在什么场景下可以应用"}},[t._v("v-if 与 v-show 有什么区别? 在什么场景下可以应用")])]),v("li",[v("a",{attrs:{href:"#v-for-遍历模板时为什么要用-key-key-有什么用"}},[t._v("v-for 遍历模板时为什么要用 key? key 有什么用？")])]),v("li",[v("a",{attrs:{href:"#怎么在组件中实现-v-modal"}},[t._v("怎么在组件中实现 v-modal")])]),v("li",[v("a",{attrs:{href:"#vue-逻辑复用"}},[t._v("vue 逻辑复用")])]),v("li",[v("a",{attrs:{href:"#异步组件的使用场景"}},[t._v("异步组件的使用场景")])]),v("li",[v("a",{attrs:{href:"#keep-live-的使用场景"}},[t._v("keep-live 的使用场景")])])])]),v("li",[v("a",{attrs:{href:"#vue-原理"}},[t._v("vue 原理")])]),v("li",[v("a",{attrs:{href:"#vue-的双向绑定原理是什么"}},[t._v("vue 的双向绑定原理是什么？")]),v("ul",[v("li",[v("a",{attrs:{href:"#什么是虚拟-dom"}},[t._v("什么是虚拟 DOM？")])]),v("li",[v("a",{attrs:{href:"#vdom-diff-特点"}},[t._v("vdom diff 特点")])]),v("li",[v("a",{attrs:{href:"#vdom-diff-算法的事件复杂度"}},[t._v("vdom diff 算法的事件复杂度")])]),v("li",[v("a",{attrs:{href:"#vue-如何监听-data-的每个属性变化"}},[t._v("vue 如何监听 data 的每个属性变化？")])]),v("li",[v("a",{attrs:{href:"#vue-如何监听数组变化"}},[t._v("Vue 如何监听数组变化")])]),v("li",[v("a",{attrs:{href:"#vue-模板引擎如何解析-指令如何处理-如何渲染为-html"}},[t._v("vue 模板引擎如何解析？指令如何处理？如何渲染为 HTML")])])])]),v("li",[v("a",{attrs:{href:"#vue-router"}},[t._v("vue-router")]),v("ul",[v("li",[v("a",{attrs:{href:"#vue-router-的-hash-模式和-history-模式有什么区别"}},[t._v("vue-router 的 hash 模式和 history 模式有什么区别？")])]),v("li",[v("a",{attrs:{href:"#vue-router-的-beforeeach-和-aftereach-一般用法-使用场景"}},[t._v("vue router 的 beforeEach 和 afterEach 一般用法/使用场景?")])])])]),v("li",[v("a",{attrs:{href:"#vuex"}},[t._v("vuex")]),v("ul",[v("li",[v("a",{attrs:{href:"#vue-中的-action-和-mutation-的区别"}},[t._v("vue 中的 action 和 mutation 的区别")])])])]),v("li",[v("a",{attrs:{href:"#vue-性能优化"}},[t._v("vue 性能优化")])]),v("li",[v("a",{attrs:{href:"#vue-与-react-的区别"}},[t._v("Vue 与 React 的区别")])])])]),v("p"),t._v(" "),v("h2",{attrs:{id:"生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),v("h3",{attrs:{id:"列举-vue-的生命周期以及它们的应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列举-vue-的生命周期以及它们的应用场景"}},[t._v("#")]),t._v(" 列举 Vue 的生命周期以及它们的应用场景")]),t._v(" "),v("p",[t._v("Vue 的生命周期可以分为"),v("strong",[t._v("挂载阶段")]),t._v("、"),v("strong",[t._v("更新阶段")]),t._v("、"),v("strong",[t._v("销毁阶段")]),t._v("三大阶段。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("挂载阶段")]),t._v(": "),v("code",[t._v("beforeCreate")]),t._v("、"),v("code",[t._v("created")]),t._v("、"),v("code",[t._v("beforeMount")]),t._v("、"),v("code",[t._v("mounted")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("更新阶段")]),t._v(": "),v("code",[t._v("beforeUpdate")]),t._v("、"),v("code",[t._v("updated")]),t._v("。")]),t._v(" "),v("li",[v("strong",[t._v("销毁阶段")]),t._v(": "),v("code",[t._v("beforeUnmount")]),t._v("、"),v("code",[t._v("unmounted")]),t._v("。")])]),t._v(" "),v("p",[v("img",{attrs:{src:a(388),alt:"Vue 生命周期"}})]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("生命周期")]),t._v(" "),v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("使用场景")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("beforeCreate")]),t._v(" "),v("td",[t._v("在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。此处无法修改 vue 实例的 "),v("code",[t._v("data")]),t._v(" 和 "),v("code",[t._v("methods")])]),t._v(" "),v("td",[t._v("由于触发的时机较早，可以处理 window.title 等外部逻辑。")])]),t._v(" "),v("tr",[v("td",[t._v("create")]),t._v(" "),v("td",[t._v("组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，"),v("code",[t._v("vm.$el")]),t._v(" 还不可用")]),t._v(" "),v("td",[t._v("可以做一些初始化工作")])]),t._v(" "),v("tr",[v("td",[t._v("beforeMount")]),t._v(" "),v("td",[t._v("在挂载开始之前被调用：相关的 render 函数首次被调用。")]),t._v(" "),v("td",[t._v("略")])]),t._v(" "),v("tr",[v("td",[t._v("mounted")]),t._v(" "),v("td",[t._v("实例被挂载后调用，此时可以访问 "),v("code",[t._v("vm.$el")]),t._v("、可以操作 DOM")]),t._v(" "),v("td",[t._v("fetch data、DOM 操作等")])]),t._v(" "),v("tr",[v("td",[t._v("beforeUpdate")]),t._v(" "),v("td",[t._v("组件数据更新之前调用，发生在虚拟 DOM 打补丁之前")]),t._v(" "),v("td",[t._v("适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。")])]),t._v(" "),v("tr",[v("td",[t._v("updated")]),t._v(" "),v("td",[t._v("组件数据更新之后")]),t._v(" "),v("td",[t._v("现在可以执行依赖于 DOM 的操作")])]),t._v(" "),v("tr",[v("td",[t._v("beforeUnmount")]),t._v(" "),v("td",[t._v("组件销毁前调用")]),t._v(" "),v("td",[t._v("解除自定义事件、消除定时器、解绑自定义的 DOM 事件监听器")])]),t._v(" "),v("tr",[v("td",[t._v("unmounted")]),t._v(" "),v("td",[t._v("组件销毁后调用, 此时实例仍然是完全正常的")]),t._v(" "),v("td",[t._v("略")])])])]),t._v(" "),v("h3",{attrs:{id:"父组件和子组件生命周期钩子执行顺序是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#父组件和子组件生命周期钩子执行顺序是什么"}},[t._v("#")]),t._v(" 父组件和子组件生命周期钩子执行顺序是什么？")]),t._v(" "),v("p",[v("strong",[t._v("渲染阶段")]),t._v("：")]),t._v(" "),v("div",{staticClass:"language-diff extra-class"},[v("pre",{pre:!0,attrs:{class:"language-diff"}},[v("code",[v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 beforeCreate\n")]),v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 created\n")]),v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 beforeMount\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 beforeCreat \n")]),v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 created \n")]),v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 beforeMount\n")]),v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 mounted\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 mounted\n")])])])])]),v("p",[v("strong",[t._v("更新阶段")]),t._v("：")]),t._v(" "),v("div",{staticClass:"language-diff extra-class"},[v("pre",{pre:!0,attrs:{class:"language-diff"}},[v("code",[v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 beforeUpdate\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 beforeUpdate\n")]),v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 updated\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 updated\n")])])])])]),v("p",[v("strong",[t._v("销毁阶段")]),t._v("：")]),t._v(" "),v("div",{staticClass:"language-diff extra-class"},[v("pre",{pre:!0,attrs:{class:"language-diff"}},[v("code",[v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 beforeUnmount\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 beforeUnmount\n")]),v("span",{pre:!0,attrs:{class:"token prefix deleted"}},[t._v("-")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 子 unmounted\n")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[v("span",{pre:!0,attrs:{class:"token prefix inserted"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token line"}},[t._v(" 父 unmounted\n")])])])])]),v("h3",{attrs:{id:"dom-渲染在-vue-的哪个生命周期就已经完成"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dom-渲染在-vue-的哪个生命周期就已经完成"}},[t._v("#")]),t._v(" DOM 渲染在 Vue 的哪个生命周期就已经完成")]),t._v(" "),v("p",[v("code",[t._v("mounted")]),t._v(" 阶段完成挂载。")]),t._v(" "),v("h3",{attrs:{id:"应该在哪个生命周期中请求数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应该在哪个生命周期中请求数据"}},[t._v("#")]),t._v(" 应该在哪个生命周期中请求数据？")]),t._v(" "),v("p",[t._v("放在 "),v("code",[t._v("mounted")]),t._v("。由于 js 是单线程，在 ajax 中异步获取到的数据 vue 并不能立即赋值到 data 中，同时还会使逻辑变得更加混乱。")]),t._v(" "),v("h3",{attrs:{id:"beforeunmount-一般的用途"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#beforeunmount-一般的用途"}},[t._v("#")]),t._v(" beforeUnmount 一般的用途")]),t._v(" "),v("ul",[v("li",[t._v("解除自定义事件")]),t._v(" "),v("li",[t._v("消除定时器")]),t._v(" "),v("li",[t._v("解绑自定义的 DOM 事件监听器")])]),t._v(" "),v("h2",{attrs:{id:"vue-使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-使用"}},[t._v("#")]),t._v(" vue 使用")]),t._v(" "),v("h3",{attrs:{id:"vue-组件通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件通信"}},[t._v("#")]),t._v(" vue 组件通信")]),t._v(" "),v("ul",[v("li",[t._v("父组件给子组件传入 "),v("code",[t._v("props")]),t._v("并监听子组件对应的事件，子组件通过 "),v("code",[t._v("emit")]),t._v(" 触发事件。")]),t._v(" "),v("li",[t._v("event-bus")]),t._v(" "),v("li",[t._v("vuex 等状态管理器")])]),t._v(" "),v("h3",{attrs:{id:"computed-的特点是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#computed-的特点是什么"}},[t._v("#")]),t._v(" computed 的特点是什么？")]),t._v(" "),v("p",[t._v("计算的值会被缓存，若 data 不会重新计算，进而提升 vue 的性能。")]),t._v(" "),v("h3",{attrs:{id:"computed-和-watch-的区别和运用的场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#computed-和-watch-的区别和运用的场景"}},[t._v("#")]),t._v(" computed 和 watch 的区别和运用的场景？")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("computed")]),t._v(": "),v("code",[t._v("computed")]),t._v(" 是计算属性，计算的值会被缓存，若 "),v("code",[t._v("data")]),t._v(" 没有改变则不会重新计算。")]),t._v(" "),v("li",[v("code",[t._v("watch")]),t._v(": 每当监听的数据变化时都会执行回调进行后续操作")])]),t._v(" "),v("p",[v("strong",[t._v("运用场景")]),t._v("：")]),t._v(" "),v("p",[t._v("当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；")]),t._v(" "),v("p",[t._v("当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")]),t._v(" "),v("h3",{attrs:{id:"组件的-data-为什么要是一个函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组件的-data-为什么要是一个函数"}},[t._v("#")]),t._v(" 组件的 data 为什么要是一个函数")]),t._v(" "),v("p",[t._v("由于 JavaScript 对象引用的特性，直接使用对象的话，组件实例化后数据将不能保持独立，组件 A 修改了数据后，组件 B 也会跟着被修改。")]),t._v(" "),v("p",[t._v("因此需要使用函数，在函数内返回一个新的对象，确保每个实例后的组件的数据是彼此独立的。")]),t._v(" "),v("h3",{attrs:{id:"vue-是单向数据流吗-怎样理解-vue-的单向数据流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-是单向数据流吗-怎样理解-vue-的单向数据流"}},[t._v("#")]),t._v(" Vue 是单向数据流吗？怎样理解 Vue 的单向数据流？")]),t._v(" "),v("p",[t._v("是单向数据流。")]),t._v(" "),v("p",[t._v("所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样做的意图是: 防止从子组件意外改变父级组件的状态，从而导致应用的数据流向变得难以理解。")]),t._v(" "),v("p",[t._v("在每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 "),v("code",[t._v("$emit")]),t._v(" 派发一个自定义事件，父组件接收到事件后，由父组件修改。")]),t._v(" "),v("h3",{attrs:{id:"v-if-与-v-show-有什么区别-在什么场景下可以应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-if-与-v-show-有什么区别-在什么场景下可以应用"}},[t._v("#")]),t._v(" v-if 与 v-show 有什么区别? 在什么场景下可以应用")]),t._v(" "),v("ul",[v("li",[t._v("使用 "),v("code",[t._v("v-show")]),t._v(" 的节点会直接渲染到 DOM 树中，它的显示与隐藏是通过 css 属性 "),v("code",[t._v("display")]),t._v(" 来控制的。")]),t._v(" "),v("li",[t._v("使用 "),v("code",[t._v("v-if")]),t._v(" 的节点默认不会直接渲染到 DOM 树中，它的显示与隐藏是根据 "),v("code",[t._v("v-if")]),t._v(" 的值判断是否将节点渲染到 DOM 树中。")]),t._v(" "),v("li",[t._v("合适的使用场景: 需要频繁切换展示或隐藏的状态可使用 "),v("code",[t._v("v-show")]),t._v("；仅少数情况会切换状态可使用 "),v("code",[t._v("v-if")]),t._v("。")])]),t._v(" "),v("p",[t._v("主要取决于元素是否会多次渲染，"),v("code",[t._v("v-if")]),t._v(" 决定节点是否渲染；"),v("code",[t._v("v-show")]),t._v(" 会渲染节点，但会通过 "),v("code",[t._v("display")]),t._v(" 控制是否展示。")]),t._v(" "),v("p",[t._v("如果仅需渲染一次的话可以使用 "),v("code",[t._v("v-if")]),t._v("。反之，如果需要频繁渲染的话可以使用 "),v("code",[t._v("v-show")]),t._v(" 仅展示显隐。")]),t._v(" "),v("h3",{attrs:{id:"v-for-遍历模板时为什么要用-key-key-有什么用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-for-遍历模板时为什么要用-key-key-有什么用"}},[t._v("#")]),t._v(" v-for 遍历模板时为什么要用 key? key 有什么用？")]),t._v(" "),v("p",[t._v("必须要用 key。因为当列表刷新时，底层的虚拟 DOM 会使用 diff 算法来对比新旧 DOM 树的变化。")]),t._v(" "),v("p",[t._v("它首先是比对同一层级的 "),v("code",[t._v("tag")]),t._v(" 和 "),v("code",[t._v("key")]),t._v(" 来判断是否是同一个节点(sameNode)；若同一个层级的列表项都设有唯一的 key 的话，那就可以避免重复渲染的问题，从而提升渲染性能。")]),t._v(" "),v("h3",{attrs:{id:"怎么在组件中实现-v-modal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#怎么在组件中实现-v-modal"}},[t._v("#")]),t._v(" 怎么在组件中实现 v-modal")]),t._v(" "),v("p",[v("code",[t._v("v-model")]),t._v(" 默认会利用组件中名为 "),v("code",[t._v("value")]),t._v(" 的 "),v("code",[t._v("prop")]),t._v(" 和监听名为 "),v("code",[t._v("input")]),t._v(" 的事件 ("),v("code",[t._v("event")]),t._v(") 完成双向绑定。原理是: 当触发 "),v("code",[t._v("input")]),t._v(" 事件时，会将 "),v("code",[t._v("input")]),t._v(" 函数接收的值赋值给 "),v("code",[t._v("value")]),t._v("。")]),t._v(" "),v("div",{staticClass:"language-html extra-class"},[v("pre",{pre:!0,attrs:{class:"language-html"}},[v("code",[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-model")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 等同于 --\x3e")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":value")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("@input")]),v("span",{pre:!0,attrs:{class:"token attr-value"}},[v("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name = $event.target.value"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),v("p",[t._v("自定义组件可以设置 "),v("code",[t._v("model")]),t._v(" 来改变 "),v("code",[t._v("v-model")]),t._v(" 绑定的属性和方法。例如封装一个 "),v("code",[t._v("checkbox")]),t._v(" 组件, 它被选中的属性应该是 "),v("code",[t._v("checked")]),t._v(":")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("Vue"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base-checkbox'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  model"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'checked'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    event"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'change'")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    checked"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Boolean\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  template"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token template-string"}},[v("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n    <input\n      type="checkbox"\n      v-bind:checked="checked"\n      v-on:change="$emit(\'change\', $event.target.checked)"\n    >\n  ')]),v("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),v("h3",{attrs:{id:"vue-逻辑复用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-逻辑复用"}},[t._v("#")]),t._v(" vue 逻辑复用")]),t._v(" "),v("ol",[v("li",[t._v("vue@3.x setup")]),t._v(" "),v("li",[t._v("Mixin")]),t._v(" "),v("li",[t._v("自定义指令")])]),t._v(" "),v("h3",{attrs:{id:"异步组件的使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步组件的使用场景"}},[t._v("#")]),t._v(" 异步组件的使用场景")]),t._v(" "),v("ol",[v("li",[t._v("加载大组件")]),t._v(" "),v("li",[t._v("路由异步加载")])]),t._v(" "),v("h3",{attrs:{id:"keep-live-的使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-live-的使用场景"}},[t._v("#")]),t._v(" keep-live 的使用场景")]),t._v(" "),v("p",[t._v("不需要重复渲染的页面，比如多个静态的 tab 页切换，将页面进行缓存后进而提升性能。")]),t._v(" "),v("h2",{attrs:{id:"vue-原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-原理"}},[t._v("#")]),t._v(" vue 原理")]),t._v(" "),v("h2",{attrs:{id:"vue-的双向绑定原理是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-的双向绑定原理是什么"}},[t._v("#")]),t._v(" vue 的双向绑定原理是什么？")]),t._v(" "),v("p",[t._v("vue.js 是采用数据劫持，结合"),v("strong",[t._v("发布者-订阅者模式")]),t._v("的方式，通过 "),v("code",[t._v("Object.defineProperty()")]),t._v(" 来劫持各个属性的 "),v("code",[t._v("setter")]),t._v("、"),v("code",[t._v("getter")]),t._v("，在数据变动时发布消息给订阅者，触发相应的监听回调。")]),t._v(" "),v("p",[t._v("具体步骤：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("需要 "),v("code",[t._v("observe")]),t._v(" 的数据对象进行递归遍历，包括子属性对象的属性，都加上 "),v("code",[t._v("setter")]),t._v(" 和 "),v("code",[t._v("getter")]),t._v("。当给这个对象的某个属性赋值时，就会触发 "),v("code",[t._v("setter")]),t._v("，也就能监听到了数据变化。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("compile")]),t._v(" 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知更新视图。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("watcher")]),t._v(" 订阅者是 "),v("code",[t._v("observer")]),t._v(" 和 "),v("code",[t._v("compile")]),t._v(" 之间通信的桥梁，主要做的事情是:")]),t._v(" "),v("ol",[v("li",[t._v("在自身实例化时往属性订阅器(dep)里面添加自己")]),t._v(" "),v("li",[t._v("自身必须有一个 update() 方法")]),t._v(" "),v("li",[t._v("待属性变动 dep.notice() 通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调，则功成身退。")])])]),t._v(" "),v("li",[v("p",[t._v("MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据 model 变更的双向绑定效果。")])])]),t._v(" "),v("h3",{attrs:{id:"什么是虚拟-dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟-dom"}},[t._v("#")]),t._v(" 什么是虚拟 DOM？")]),t._v(" "),v("p",[t._v("虚拟 DOM 主要是指 "),v("code",[t._v("vdom")]),t._v(", 它用 js 生成 DOM 树来模拟 DOM 结构，计算出最小的变更来操作 dom。")]),t._v(" "),v("p",[t._v("由于真实 DOM 的操作会非常耗费性能，因此 vue 引入了虚拟 DOM 来检查对 DOM 的操作。引入虚拟 DOM 后，开发方式也发生了改变。以前需要手动操作 DOM，现在只需要关心数据的变化，由数据驱动视图。")]),t._v(" "),v("p",[t._v("虚拟 DOM 计算最小的变更是通过 "),v("code",[t._v("diff")]),t._v(" 算法来实现的，它也是 "),v("code",[t._v("vdom")]),t._v(" 中最核心、最关键的部分。我们常说的 "),v("code",[t._v("vdom diff")]),t._v(" 其实就是 "),v("code",[t._v("diff")]),t._v(" 新旧树的变化。")]),t._v(" "),v("h3",{attrs:{id:"vdom-diff-特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vdom-diff-特点"}},[t._v("#")]),t._v(" vdom diff 特点")]),t._v(" "),v("ul",[v("li",[t._v("vdom diff 只 diff 同一层，不跨级比较。")]),t._v(" "),v("li",[t._v("tag 不相同，则直接丢掉重建，不再深度比较。")]),t._v(" "),v("li",[t._v("tag 和 key，两者都相同，则认为是相同节点，不再深度比较。")])]),t._v(" "),v("h3",{attrs:{id:"vdom-diff-算法的事件复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vdom-diff-算法的事件复杂度"}},[t._v("#")]),t._v(" vdom diff 算法的事件复杂度")]),t._v(" "),v("p",[t._v("在 "),v("code",[t._v("O(n^3)")]),t._v(" 的基础上使用了同层比较策略，因此优化为 "),v("code",[t._v("O(n)")]),t._v(".")]),t._v(" "),v("h3",{attrs:{id:"vue-如何监听-data-的每个属性变化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-如何监听-data-的每个属性变化"}},[t._v("#")]),t._v(" vue 如何监听 data 的每个属性变化？")]),t._v(" "),v("ul",[v("li",[t._v("使用 Object.defineProperty")])]),t._v(" "),v("p",[t._v("TODO: 待补充...")]),t._v(" "),v("h3",{attrs:{id:"vue-如何监听数组变化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-如何监听数组变化"}},[t._v("#")]),t._v(" Vue 如何监听数组变化")]),t._v(" "),v("p",[v("code",[t._v("Object.defineProperty")]),t._v(" 只能对属性进行数据劫持，不能监听数组变化，需要重新原型，重写 push/pop 等方法实现监听：")]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * Observe a list of Array items.\n   */")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeArray")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("items"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Array"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 对属性进行递归遍历\n   */")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// observe 功能为监测数据的变化")]),t._v("\n")])])]),v("p",[t._v("在 vue3 中使用了 "),v("code",[t._v("Proxy")]),t._v(" 代替 "),v("code",[t._v("Object.defineProperty")]),t._v("，"),v("code",[t._v("Proxy")]),t._v(" 可以原生支持监听数组变化。")]),t._v(" "),v("h3",{attrs:{id:"vue-模板引擎如何解析-指令如何处理-如何渲染为-html"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-模板引擎如何解析-指令如何处理-如何渲染为-html"}},[t._v("#")]),t._v(" vue 模板引擎如何解析？指令如何处理？如何渲染为 HTML")]),t._v(" "),v("ul",[v("li",[t._v("在开发环境下使用 webpack 的 vue-loader 编译模板")]),t._v(" "),v("li",[t._v("先将模板编译为 "),v("code",[t._v("render")]),t._v(" 函数，执行 "),v("code",[t._v("render")]),t._v(" 函数会返回 "),v("code",[t._v("vnoe")])]),t._v(" "),v("li",[t._v("基于 "),v("code",[t._v("vnode")]),t._v(" 再执行 patch 和 diff")])]),t._v(" "),v("h2",{attrs:{id:"vue-router"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[t._v("#")]),t._v(" vue-router")]),t._v(" "),v("h3",{attrs:{id:"vue-router-的-hash-模式和-history-模式有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-的-hash-模式和-history-模式有什么区别"}},[t._v("#")]),t._v(" vue-router 的 hash 模式和 history 模式有什么区别？")]),t._v(" "),v("p",[v("code",[t._v("hash")]),t._v(" 模式: 使用 URL 的 "),v("code",[t._v("hash")]),t._v(" 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。它的特点如下:")]),t._v(" "),v("ul",[v("li",[t._v("会占用原本 hash 锚点定位的功能")]),t._v(" "),v("li",[t._v("页面的路径以 "),v("code",[t._v("#")]),t._v(" 开头，不方便用户记忆")])]),t._v(" "),v("p",[v("code",[t._v("history")]),t._v(" 模式: 利用 "),v("code",[t._v("history.pushState")]),t._v(" API 来完成 "),v("code",[t._v("URL")]),t._v(" 跳转而无须重新加载页面。")]),t._v(" "),v("ul",[v("li",[t._v("使用该模式的页面像正常的 URL")]),t._v(" "),v("li",[t._v("需要服务端支持，若服务端没有正确配置，用户一刷新页面就会返回 404")])]),t._v(" "),v("h3",{attrs:{id:"vue-router-的-beforeeach-和-aftereach-一般用法-使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-的-beforeeach-和-aftereach-一般用法-使用场景"}},[t._v("#")]),t._v(" vue router 的 beforeEach 和 afterEach 一般用法/使用场景?")]),t._v(" "),v("p",[v("code",[t._v("beforeEach")]),t._v(" 可以从路由 "),v("code",[t._v("meta")]),t._v(" 中获取元数据来处理一些东西。比如在 "),v("code",[t._v("router meta")]),t._v(" 中设置 "),v("code",[t._v("title")]),t._v(" 的信息。还可以用于用户权限校验，当用户没有足够的权限访问目标页面的话，那就阻止页面跳转。")]),t._v(" "),v("p",[v("code",[t._v("afterEach")]),t._v(" 当页面切换后可以在此钩子将页面的滚动距离滚回顶部。")]),t._v(" "),v("h2",{attrs:{id:"vuex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[t._v("#")]),t._v(" vuex")]),t._v(" "),v("h3",{attrs:{id:"vue-中的-action-和-mutation-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的-action-和-mutation-的区别"}},[t._v("#")]),t._v(" vue 中的 action 和 mutation 的区别")]),t._v(" "),v("ol",[v("li",[t._v("action 可以处理异步，mutation 不可以")]),t._v(" "),v("li",[t._v("mutation 一般做原子操作，action 则可以整合多个 mutation")])]),t._v(" "),v("h2",{attrs:{id:"vue-性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-性能优化"}},[t._v("#")]),t._v(" vue 性能优化")]),t._v(" "),v("p",[t._v("在使用层面上需要注意以下几点:")]),t._v(" "),v("ul",[v("li",[t._v("根据业务场景合理的使用 "),v("code",[t._v("v-if")]),t._v(" 和 "),v("code",[t._v("v-show")])]),t._v(" "),v("li",[t._v("合理使用 "),v("code",[t._v("computed")])]),t._v(" "),v("li",[v("code",[t._v("v-for")]),t._v(" 循环时加上唯一的 "),v("code",[t._v("key")]),t._v(", 避免和 "),v("code",[t._v("v-if")]),t._v(" 同时使用")]),t._v(" "),v("li",[t._v("在组件内创建的自定义事件、DOM 事件监听器在组件销毁前要销毁，避免内存泄露。")]),t._v(" "),v("li",[t._v("根据业务场景合理使用 "),v("code",[t._v("keep-alive")])]),t._v(" "),v("li",[t._v("data 层级不易过深")])]),t._v(" "),v("h2",{attrs:{id:"vue-与-react-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-与-react-的区别"}},[t._v("#")]),t._v(" Vue 与 React 的区别")]),t._v(" "),v("blockquote",[v("p",[t._v("如果候选者 vue 和 react 都开发过项目的话，面试官可能会问两者的差别，技术选型的理由")])]),t._v(" "),v("ol",[v("li",[t._v("在语法层面上 React 使用 JSX，Vue 使用模板。")]),t._v(" "),v("li",[t._v("在编程思想上，React 是函数式编程，vue 是声明式编程")]),t._v(" "),v("li",[t._v("React 相比 vue 会更精简，同时学习成本会更高一些。vue 的语法糖和封装程度比 React 高。比如 vue 原生的 "),v("code",[t._v("watch")]),t._v("、"),v("code",[t._v("keep-alive")]),t._v(" 等功能都需要 React 用户自己去实现，而 "),v("code",[t._v("vue")]),t._v(" 可以只关注使用。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);